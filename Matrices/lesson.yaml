- Class: meta
  Course: Big Data 2
  Lesson: Matrices
  Author: Muhammad Rehman Zafar
  Type: Standard
  Organization: Humber College, Toronto, Canada
  Version: 2.4.5
  
- Class: text
  Output: A matrix is essentially a collection of vectors. While the length describes the size of a vector, the size of a matrix is determined by its number of rows and columns.
  
- Class: text
  Output: Matrices are vectors with a dimension attribute and it's essential to many statistical methods.
  
- Class: cmd_question
  Output: | 
    To define a matrix in R, utilize the function called matrix, passing the matrix elements to the data parameter as a vector. Let's create a 3x3 matrix by typing my.matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3).
  CorrectAnswer: my.matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)
  AnswerTests: omnitest(correctExpr='my.matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)')
  Hint: Type my.matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3) and press Enter.
  
- Class: text
  Output: |
    By default R fills matrix coumn-by-column fashion. However, we can control it by passing byrow = TRUE parameter in matrix function to fill it by row. Here is an example: my.matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3, byrow= TRUE).

- Class: text
  Output: |
    When you have several vectors of the same length, constructing a matrix is straightforward by concatenating these vectors using the built-in R functions, rbind() or cbind(). 
    Here are the examples: 
    rbind(c(1:3), c(4:6)) or 
    cbind(c(1,4), c(2,5), c(3,6))
  
- Class: cmd_question
  Output: Now check the length of my.matrix by typing dim(my.matrix). It will return the dimmensions of the matrix (my.matrix).
  CorrectAnswer: dim(my.matrix)
  AnswerTests: omnitest(correctExpr='dim(my.matrix)')
  Hint: Use dim(my.matrix) function.
  
- Class: cmd_question
  Output: To extract first row from my.matrix type my.matrix[1,]. It will return first row and all columns.
  CorrectAnswer: my.matrix[1,]
  AnswerTests: omnitest(correctExpr='my.matrix[1,]')
  Hint: Type my.matrix[1,] and press Enter. 
  
- Class: cmd_question
  Output: To extract first column from my.matrix type my.matrix[,1]. It will return first column and all rows.
  CorrectAnswer: my.matrix[,1]
  AnswerTests: omnitest(correctExpr='my.matrix[,1]')
  Hint: Type my.matrix[,1] and press Enter. 
  
- Class: cmd_question
  Output: To extract element of first row and second column from my.matrix type my.matrix[1,2].
  CorrectAnswer: my.matrix[1,2]
  AnswerTests: omnitest(correctExpr='my.matrix[1,2]')
  Hint: Type my.matrix[1,2] and press Enter.
  
- Class: cmd_question
  Output: To extract second row and first and third columns from my.matrix type my.matrix[2, c(1,3)]. 
  CorrectAnswer: my.matrix[2, c(1,3)]
  AnswerTests: omnitest(correctExpr='my.matrix[2, c(1,3)]')
  Hint: Type my.matrix[2, c(1,3)] and press Enter.

- Class: cmd_question
  Output: To overwrite the value of index [2,1], type my.matrix[2, 1] <- 22. 
  CorrectAnswer: my.matrix[2, 1] <- 22
  AnswerTests: omnitest(correctExpr='my.matrix[2, 1] <- 22')
  Hint: Type my.matrix[2, 1] <- 22 and press Enter.

- Class: cmd_question
  Output: To confirm the changes, display matrix by typing my.matrix. 
  CorrectAnswer: my.matrix
  AnswerTests: omnitest(correctExpr='my.matrix')
  Hint: Type my.matrix and press Enter.

  
  
